apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: configuration-environment
spec:
  compositeTypeRef:
    apiVersion: web7.md/v1alpha1
    kind: Environment
  resources:


    - name: helm-provider
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        metadata:
          name: helm-provider
        spec:
          credentials:
            source: InjectedIdentity
      patches:
      - type: ToCompositeFieldPath
        fromFieldPath: "metadata.name"
        toFieldPath: "status.providers.helm.name"
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.environment.name"
        toFieldPath: "metadata.name"


    - name: crossplane-release
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: crossplane
              repository: "https://charts.crossplane.io/stable"
              version: "1.15.2"
            namespace: ""
            set:
            - name: provider.packages
              value: "xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.13.0"
            values:
              provider:
                packages: []
              configuration:
                packages: []
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.helmProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.name
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.configuration.packages
        toFieldPath: spec.forProvider.values.configuration.packages
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.provider.packages
        toFieldPath: spec.forProvider.values.provider.packages


    - name: kyverno-release
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          name: kyverno
          annotations:
            crossplane.io/external-name: kyverno
        spec:
          forProvider:
            chart:
              name: kyverno
              repository: "https://kyverno.github.io/kyverno/"
              version: "3.2.5"
            namespace: ""
            set:
              - name: features.admissionReports.enabled
                value: "true"
              - name: aggregateReports.enabled
                value: "true"
              - name: policyReports.enabled
                value: "true"
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.helmProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.namespace
   

    - name: kubernetes-provider-remote
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: ProviderConfig
              spec:
                credentials:
                  source: InjectedIdentity
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.kubernetesProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.environment.name"
        toFieldPath: "metadata.name"
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.environment.name"
        toFieldPath: "spec.forProvider.manifest.metadata.name"


    - name: registry-deployment
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: registry-deployment
        spec:
          forProvider:
            manifest:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: ""
                namespace: ""
              spec:
                selector:
                  matchLabels:
                    app: ""
                template:
                  metadata:
                    labels:
                      app: ""
                  spec:
                    containers:
                    - image: registry:2
                      imagePullPolicy: IfNotPresent
                      name: registry
                      ports:
                      - containerPort: 5000
                        name: oci
                        protocol: TCP
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.kubernetesProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels.app
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.app
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-registry"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-registry-deployment"
        toFieldPath: metadata.name


    - name: registry-secret
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                namespace: default
              type: Opaque
              stringData:
                password: ""
                username: ""
                server: ""
                email: ""
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.kubernetesProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-registry"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.username
        toFieldPath: spec.forProvider.manifest.stringData.username
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.password
        toFieldPath: spec.forProvider.manifest.stringData.password
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.server
        toFieldPath: spec.forProvider.manifest.stringData.server
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.email
        toFieldPath: spec.forProvider.manifest.stringData.email


    - name: kyverno-policy-scplc
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: kyverno.io/v1
              kind: ClusterPolicy
              metadata:
                name: ""
              spec:
                generateExisting: true
                rules:
                  - name: kndp-sync-registry-secrets
                    match:
                      resources:
                        kinds:
                          - Namespace
                    generate:
                      apiVersion: v1
                      kind: Secret
                      name: ""
                      namespace: ""
                      synchronize: true
                      clone:
                        namespace: ""
                        name: ""
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.kubernetesProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.clone.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.clone.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.namespace


    - name: kyverno-policy-regplc
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: kyverno.io/v1
              kind: ClusterPolicy
              metadata:
                name: ""
              spec:
                generateExisting: true
                rules:
                  - name: ""
                    match:
                      any:
                        - resources:
                            kinds:
                              - Pod
                    skipBackgroundRequests: false
                    mutate:
                      foreach:
                        - list: request.object.spec.containers
                          patchStrategicMerge:
                            spec:
                              containers:
                                - (image): ""
                                  image: "{{ regex_replace_all_literal('^[^/]+', '{{element.image}}', 'localhost:30100') }}"
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.kubernetesProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-regplc"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-regplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "*%s*"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].mutate.foreach[0].patchStrategicMerge.spec.containers[0].(image)
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-regplc"
        toFieldPath: metadata.name

    - name: registry-service
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Service
              metadata:
                name: ""
                namespace: ""
              spec:
                ports:
                - name: oci
                  port: 80
                  nodePort: 30100
                  protocol: TCP
                  targetPort: 5000
                selector:
                  app: kndp-registry
                type: NodePort
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.kubernetesProviderCgfRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-registry"
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.environment.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-registry"
        toFieldPath: spec.forProvider.manifest.metadata.name

