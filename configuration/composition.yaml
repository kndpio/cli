apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: configuration-environment
spec:
  compositeTypeRef:
    apiVersion: kndp.io/v1alpha1
    kind: Environment
  resources:

    - name: crossplane-release
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: crossplane
              repository: "https://charts.crossplane.io/stable"
              version: "1.15.2"
            namespace: ""
            set:
            - name: provider.packages
              value: "xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.13.0"
            values:
              extraObjects:
              - apiVersion: kndp.io/v1alpha1
                kind: Environment
                metadata:
                  name: environment-test
                spec:
                  name: "kndp-crossplane"
                  namespace: "kndp-system"
                  registry: 
                    name: ""
                    server: ""
                    token: ""
                  configuration:
                    packages: []
                  provider:
                    packages: []
                  helmProviderCfgRef: kndp-helm-provider-config
                  kubernetesProviderCfgRef: kndp-kubernetes-provider-config
              provider:
                packages: []
              configuration:
                packages: []
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.helmProviderCfgRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.namespace
        toFieldPath: spec.forProvider.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.name
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.configuration.packages
        toFieldPath: spec.forProvider.values.configuration.packages
      - type: FromCompositeFieldPath
        fromFieldPath: spec.provider.packages
        toFieldPath: spec.forProvider.values.provider.packages

    - name: kyverno-release
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          name: kyverno
          annotations:
            crossplane.io/external-name: kyverno
        spec:
          forProvider:
            chart:
              name: kyverno
              repository: "https://kyverno.github.io/kyverno/"
              version: "3.2.5"
            namespace: ""
            set:
              - name: features.admissionReports.enabled
                value: "true"
              - name: aggregateReports.enabled
                value: "true"
              - name: policyReports.enabled
                value: "true"
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.helmProviderCfgRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.namespace
        toFieldPath: spec.forProvider.namespace

    - name: registry-secret
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                namespace: ""
                name: ""
              type: kubernetes.io/dockerconfigjson
              data:
                .dockerconfigjson: ""
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.kubernetesProviderCfgRef
          toFieldPath: spec.providerConfigRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - type: FromCompositeFieldPath
          fromFieldPath: spec.registry.name
          transforms:
            - type: string
              string:
                type: Format
                fmt: "%s-registry"
          toFieldPath: spec.forProvider.manifest.metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.registry.name
          transforms:
            - type: string
              string:
                type: Format
                fmt: "%s-registry"
          toFieldPath: metadata.name
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.registry.token
            strategy: string
            string:
              fmt: "user:%s"
          transforms:
            - type: string
              string:
                type: Convert
                convert: "ToBase64"
          toFieldPath: metadata.annotations[auth]
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.annotations[auth]
          toFieldPath: status.registry.auth
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.registry.server
              - fromFieldPath: status.registry.auth
            strategy: string
            string:
              fmt: '{"auths":{"%s":{"auth":"%s"}}}'
          transforms:
            - type: string
              string:
                type: Convert
                convert: "ToBase64"
          toFieldPath: spec.forProvider.manifest.data[.dockerconfigjson]

    - name: kyverno-policy-scplc
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: kyverno.io/v1
              kind: ClusterPolicy
              metadata:
                name: ""
              spec:
                generateExisting: true
                rules:
                  - name: kndp-sync-registry-secrets
                    match:
                      resources:
                        kinds:
                          - Namespace
                    generate:
                      apiVersion: v1
                      kind: Secret
                      name: ""
                      namespace: ""
                      synchronize: true
                      clone:
                        namespace: ""
                        name: ""
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.kubernetesProviderCfgRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.clone.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.namespace
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.clone.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.namespace
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].generate.namespace

    - name: kyverno-policy-regplc
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: kyverno.io/v1
              kind: ClusterPolicy
              metadata:
                name: ""
              spec:
                generateExisting: true
                rules:
                  - name: ""
                    match:
                      any:
                        - resources:
                            kinds:
                              - Pod
                    skipBackgroundRequests: false
                    mutate:
                      foreach:
                        - list: request.object.spec.containers
                          patchStrategicMerge:
                            spec:
                              containers:
                                - (image): ""
                                  image: "{{ regex_replace_all_literal('^[^/]+', '{{element.image}}', 'localhost:30100') }}"
      patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.kubernetesProviderCfgRef
        toFieldPath: spec.providerConfigRef.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-scplc"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.namespace
        toFieldPath: spec.forProvider.manifest.metadata.namespace
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-regplc"
        toFieldPath: spec.forProvider.manifest.metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-regplc"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "*%s*"
        toFieldPath: spec.forProvider.manifest.spec.rules[0].mutate.foreach[0].patchStrategicMerge.spec.containers[0].(image)
      - type: FromCompositeFieldPath
        fromFieldPath: spec.registry.name
        transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-regplc"
        toFieldPath: metadata.name

